1. connect
const mongoose = require('mongoose');
mongoose.connect(uri(s), [options], [callback])
//url(s):数据库地址,可以是多个,以`,`隔开
//options:可选,配置参数
//callback:可选,回调

// 规则
mongoose.connect('mongodb://数据库地址(包括端口号)/数据库名称')
// 连接mongodb示例
mongoose.connect('mongodb://localhost:27017/db');  //连接本地默认27017端口的mongodb
//连接指定用户连接示例
mongoose.connect('mongodb://用户名:密码@127.0.0.1:27017/数据库名称')
//连接多个数据库示例
//如果你的app中要连接多个数据库，只需要设置多个url以,隔开，同时设置mongos为true
mongoose.connect('urlA,urlB,...', {
   mongos : true
})

2. schema & model
const mongoose = require('mongoose');

const {Schema} = mongoose;
//  用户对象模型
const userSchema = new Schema({
  name: {
    type: String, //类型
    default: Date.now // 默认值
  },
  avatar: {
        type: String,
        required: true //必须有值
  },
  user: String, 
  passworld: String,
  hash: String, 
  score: Number, 
  learn: Array, 
  message: Array, 
  star: Array, 
  sign: Array,
  signdate: String, 
  isregister: Boolean, 
});

schema字段类型

String
Number
Date
Buffer
Boolean
Mixed
ObjectId
Array

model 

const db= {
  User: mongoose.model('MUser', muserSchema),
};
module.exports = db;

3. 操作mongodb数据库

3.1 find 
find用来查询并输出该条件下的所有文档
db.Userl.find({conditions}, {options}, callback)
conditions Object类型 //查询条件
options Object 类型 //查询配置参数
callback Function //回调

// 查询Article模型下所有数据
db.Article.find({}, function(err, docs){
    if (err) {
            console.log('出错'+ err);
            return;
    }
    res.json(docs); // 以json格式输出
});

// 查询Article模型下state字段为'publish'的内容，并且不输出articleContent和user字段内容。注！（1为只输出该字段，0为不输出该字段）
db.Article.find({state: "publish"}, {articleContent: 0,user: 0}, function(err, docs){
    if (err) {
            console.log('出错'+ err);
            return;
    }
    res.json(docs);
});
//查询阅读量大于500小于600的文章
db.Article.find(({views: {$gte: 500, $lte: 600}}), function(err, docs){
    if (err) {
            console.log('出错'+ err);
            return;
    }
    res.json({data:docs});
}) 
// 复杂条件查询
//$ro 查询该模型下的title字段或者tag字段，$regex 为正则匹配实现模糊查询，$options为不区分大小写
db.Article.find({ $or: [{title: {$regex: searchval, $options:'i'} }, { tag: {$regex: searchval, $options:'i' }}] }}, function(err, docs){
    if (err) {
            console.log('出错'+ err);
            return;
    }
    res.json({data:docs});
})

条件查询
$or --------------- 或关系
$nor ------------- 或关系取反
$gt --------------- 大于
$gte -------------- 大于等于
$lt ---------------- 小于
$lte --------------- 小于等于
$ne --------------- 不等于
$in ---------------- 在多个值范围内
$nin -------------- 不在多个值范围内
$all --------------- 匹配数组中多个值
$regex ----------- 正则，用于模糊查询
$size ------------- 匹配数组大小
$maxDistance -- 范围查询，距离（基于LBS）
$mod ------------ 取模运算
$near ------------ 邻域查询，查询附近的位置（基于LBS）
$exists ---------- 字段是否存在
$elemMatch --- 匹配内数组内的元素
$within ---------- 范围查询（基于LBS）
$box ------------- 范围查询，矩形范围（基于LBS）
$center ---------- 范围醒询，圆形范围（基于LBS）
$centerSphere - 范围查询，球形范围（基于LBS）
$slice ------------- 查询字段集合中的元素（比如从第几个之后，第N到第M个元素

3.2 findOne
db.Article.findOne({title: req.body.title}, function(err, docs){
    if (err) {
        console.log('出错'+ err);
    }
    res.json(docs);
})

3.3 findById
db.Article.findOne(id, function(err, docs){
    if (err) {
        console.log('出错'+ err);
    }
    res.json(docs);
})

3.4 count
db.Article.count(id, function(err, docs){
    if (err) {
        console.log('出错'+ err);
    }
    res.json(docs);
})

3.5 where
db.Article.where('age').gte(25)
.where('tags').in(['movie', 'music', 'art'])
.select('name', 'age', 'tags')
.skip(20)
.limit(10)
.asc('age')
.slaveOk()
.hint({ age: 1, name: 1 })
.run(function(err, docs){
    if (err) {
        console.log('出错'+ err);
    }
    res.json(docs);
}));

$where
db.MUser.$where('this.firstname === this.lastname').exec((err, docs) => {
    res.json({docs});
});

sort & skip & limit
// 实现文章分页，按时间倒序排列输出
db.Article.find({tag:req.params.labe}, function(err, docs){
    if (err)return;
    res.json(docs)
}).sort({date:-1}).skip(page*pagenum).limit(pagenum)

3.6 mongodb增加
//保存一个用户信息，userobj为你创建的文档对象模型里的字段，需正确对应传入
const userobj={
    email: query,
    passworld: req.body.passworld,
    hash: hash,
    isregister: false,
    score: 5,
    sign: [],
    signdate: ''
}
new db.MUser(userobj).save(function(error){
    if (error) {
        res.status(500).send()
        return
    }
    res.json({statu: 200})
})

3.7 mongodb删除
db.Course.remove({_id: req.body.id}, function(err, docs){
    if (err) {
            res.status(500).send();
            return
    }
    res.json({statu: 200})
})

3.8 mongodbg更新
// 更新指定email字段数据条目下字段为content的内容，如果不存在就创建该字段
db.Share.update({email: email},{$set:{content: newarr}}, function(err, docs){
    if (err) {
            res.status(500).send();
            return
    }
    res.json({statu: 200});
})

//$set 指定字段的值，这个字段不存在就创建它。可以是任何MondoDB支持的类型。
Article.update({_id : id}, {$set : {views : 51, title : ‘修改后的标题’ …}})

//$unset 同上取反，删除一个字段
Article.update({views : 50}, {$unset : {views : ‘remove’}})
//执行后: views字段不存在

//$inc 增减修改器，只对数字有效。
Article.update({_id : id}, {$inc : {views : 1}})

//$push 为字段为数组的内容push数据
Article.update({_id : id}, {$push : {message : messageobj}})

//$pop从头部或尾部删除单个元素（1为从后面删除,-1为从前面删除）
db.Article.update(({_id: id), {$pop:{relationships: -1})

//__$pull__删除满足条件的元素，不止删除一个
db.Article.update(({_id: id), {$pull:{“relationships”:{“fname”:”dongren”, ”lname”: ”zeng”}}})

$set 指定字段的值，这个字段不存在就创建它。可以是任何MondoDB支持的类型。

Article.update({_id : id}, {$set : {views : 51, title : '修改后的标题' ...}})

$unset 同上取反，删除一个字段

Article.update({views : 50}, {$unset : {views : 'remove'}})
//执行后: views字段不存在

$inc 增减修改器，只对数字有效。

Article.update({_id : id}, {$inc : {views : 1}})

$push 为字段为数组的内容push数据

Article.update({_id : id}, {$push : {message : messageobj}})

$pop 从头部或尾部删除单个元素（1为从后面删除,-1为从前面删除）

db.Article.update(({_id: id), {$pop:{relationships: -1})

$pull 删除满足条件的元素，不止删除一个

db.Article.update(({_id: id), {$pull:{“relationships”:{“fname”:”dongren”, ”lname”: ”zeng”}}})